<%
    toolbar_buttons = {
      "chapnums" => "Chapters",
      "depdiag" => "DepGraphs",
      "status" => "Status",
# TODO: BEGIN ---------- This has to be moved to cosmosys_req!!! --------------
      "rqtype" => "RqType",
      "rqlevel" => "RqLevel",
      "ration" => "Rationale",
      "verif" => "Verif",
      "compl" => "Compliance",
      "refdoc" => "RefDoc",
      "appldoc" => "ApplDoc",
# TODO: END   ---------- This has to be moved to cosmosys_req!!! --------------
      "assigned" => "Assigned"
    }

    # The metadata_dict we receive is inconsistent and has the keys with mixed
    # case. We need to convert them to lowercase:, and thus we have to do the
    # same with the flag keys we are going to use.
    metadata_dict = metadata_dict.transform_keys(&:downcase)
    flags = flags.transform_keys(&:to_s).transform_keys(&:downcase)

    def current_status?(key, flags, metadata_dict)
      key = key.to_s.downcase

      return to_bool(flags[key]) if flags[key] != nil

      return to_bool(metadata_dict[key][:default_visibility]) if metadata_dict[key] != nil and metadata_dict[key][:default_visibility] != nil

      return true
    end

    def to_bool(value)
      return [1, "1", true, "true", "t","yes","y"].include?(value)
    end

    def current_label(label_hash, key, metadata_dict)
      key = key.to_s.downcase

      return metadata_dict[key][:label_to_display] if metadata_dict[key] != nil and metadata_dict[key][:label_to_display] != nil

      return label_hash[key] || key.to_s
    end
%>
<div style="width: 100%; display: flex; justify-content: space-between; flex-wrap: wrap;">
  <div style="flex: 1; flex-shrink: 0;">

    <% for button_key in toolbar_buttons.keys do %>
      <%
          button = {
            target: current_status?(button_key, flags, metadata_dict) ? "false" : "true",
            label: (current_status?(button_key, flags, metadata_dict) ? "-" : "+") + current_label(toolbar_buttons, button_key, metadata_dict)
          }
        %>
      <button onClick="s = new URLSearchParams(window.location.search); s.set('<%= button_key.to_s %>','<%= button[:target] %>'); window.location.search = s.toString();">
        <%= button[:label] %>
      </button>
    <% end %>

  </div>

  <div style="flex: 1; flex-shrink: 0; text-align: right;">
    <label for="format">Format:
      <select name="format">
        <option value="html">html</option>
        <option value="odt" >odt</option>
        <option value="docx" selected>docx</option>
      </select>
    </label>
    <%
      known_formats = {"A4" => {"Portrait" => [588, 1000], "Landscape" => [917, 525]}}
      # The DIN A series formats are multiples of the A0 format, so we can calculate the dimensions
      # of the other formats by halving or doubling the dimensions of the base format.
      known_formats["A3"] = {
        "Portrait" => [
          known_formats["A4"]["Portrait"][0] * 2,
          known_formats["A4"]["Portrait"][1] * 2
        ],
        "Landscape" => [
          known_formats["A4"]["Landscape"][0] * 2,
          known_formats["A4"]["Landscape"][1] * 2
        ]
      }

      # Get the settings for the plugin with default values if not found
      cosmosys_settings = Setting.find_by_name("plugin_cosmosys")
      cosmosys_settings = cosmosys_settings == nil ? {
        "report_format" => "A4",
        "report_orientation" => "Portrait"
      } : cosmosys_settings.value

      # report_format by default is A4, unless the value in cosmosys_settings is a key of known_formats
      report_format = known_formats[cosmosys_settings["report_format"]] ? cosmosys_settings["report_format"] : "A4"

      # report_orientation by default is Portrait, unless the value in cosmosys_settings is "Landscape"
      report_orientation = cosmosys_settings["report_orientation"] == "Landscape" ? "Landscape" : "Portrait"

      # Get the width and height for the selected format and orientation
      # If the orientation is Landscape, swap the values
      maxWidth, maxHeight = known_formats[report_format][report_orientation]
      maxWidth, maxHeight = maxHeight, maxWidth if report_orientation == "Landscape"
      %>
    <button onClick="<%= "downloadReport('#{@project.identifier}','#{@project.name}','#{@project.csys.code}',#{maxWidth},#{maxHeight})" %>">Download</button>
  </div>
</div>
